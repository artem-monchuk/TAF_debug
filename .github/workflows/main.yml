name: Pipeline

on:
  pull_request: #trigger on pull requests to the branch
    branches:
      - main
  schedule: #trigger by schedule at midnight
    - cron: "0 0 * * *"
  workflow_dispatch: #manually trigger the workflow
    inputs:
      browser:
        description: "Select browser to run UI tests against"
        required: true
        default: "chrome"
        type: string
        options:
          - chrome
          - firefox
          - edge

jobs:
  test-suite:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0' 

      - name: Install browser dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          
          #install Chrome Driver, Firefox Driver, Edge Driver dynamically based on input
          if [[ "${{ github.event.inputs.browser }}" == "chrome" ]]; then
            wget https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_linux64.zip
            unzip chromedriver_linux64.zip
            sudo mv chromedriver /usr/local/bin/
            sudo chmod +x /usr/local/bin/chromedriver
          elif [[ "${{ github.event.inputs.browser }}" == "firefox" ]]; then
            wget https://github.com/mozilla/geckodriver/releases/download/v0.30.0/geckodriver-v0.30.0-linux64.tar.gz
            tar -xvzf geckodriver-v0.30.0-linux64.tar.gz
            sudo mv geckodriver /usr/local/bin/
            sudo chmod +x /usr/local/bin/geckodriver
          elif [[ "${{ github.event.inputs.browser }}" == "edge" ]]; then
            wget https://msedgedriver.azureedge.net/114.0.5735.90/msedgedriver-linux64.zip
            unzip msedgedriver-linux64.zip
            sudo mv msedgedriver /usr/local/bin/
            sudo chmod +x /usr/local/bin/msedgedriver
          fi

      - name: Debug File Path
        run: |
          pwd
          ls -R . # List files and directories recursively
          
      #update testsettings.json dynamically based on user input
      - name: Update testsettings.json
        shell: pwsh #PowerShell on GitHub runner
        run: |
          $testSettingsPath = "Tests/Configuration/testsettings.json"

          #parse JSON file
          $json = Get-Content $testSettingsPath | ConvertFrom-Json

          #update the "Browsers" property with the selected browser
          $json.Browsers = @("${{ github.event.inputs.browser }}")

          #convert the updated JSON object back to JSON and overwrite the file
          $json | ConvertTo-Json -Depth 10 | Set-Content $testSettingsPath

          Write-Host "Updated testsettings.json to use browser: ${{ github.event.inputs.browser }}"

      - name: Restore dependencies
        run: dotnet restore

      - name: Run API Tests
        run: dotnet test --filter "Category=API" --logger "trx;LogFileName=api-tests.trx"
        continue-on-error: true #UI tests still run even if API tests fail

      - name: Run UI Tests
        run: dotnet test --filter "Category!=API" --logger "trx;LogFileName=ui-tests.trx"

