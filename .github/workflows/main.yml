name: Pipeline

on:
  pull_request: #trigger on pull requests to the branch
    branches:
      - main
  schedule: #trigger by schedule at midnight
    - cron: "0 0 * * *"
  workflow_dispatch: #manually trigger the workflow
    inputs:
      browser:
        description: "Select browser to run UI tests against"
        required: true
        default: "chrome"
        type: string
        options:
          - chrome
          - firefox
          - edge

jobs:
  test-suite:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0' 

      - name: Install Chrome dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip xvfb libxi6
          
          if [ "${{ github.event.inputs.browser }}" == "chrome" ]; then
            # Install Chrome dependencies (as working currently)
            echo "Installing dependencies for Chrome..."
            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
            sudo apt-get update
            sudo apt-get install -y google-chrome-stable
            google-chrome --version
            which google-chrome

          elif [ "${{ github.event.inputs.browser }}" == "firefox" ]; then
            # Install Firefox dependencies
            echo "Installing dependencies for Firefox..."
            sudo apt-get install -y firefox
            firefox --version
            which firefox
            wget https://github.com/mozilla/geckodriver/releases/download/v0.30.0/geckodriver-v0.30.0-linux64.tar.gz
            tar -xvzf geckodriver-v0.30.0-linux64.tar.gz
            sudo mv geckodriver /usr/local/bin/
            sudo chmod +x /usr/local/bin/geckodriver

          elif [ "${{ github.event.inputs.browser }}" == "edge" ]; then
            echo "Installing dependencies for Edge..."
            #add Microsoft Edge repository
            wget -q -O - https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
            sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/
            sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main" > /etc/apt/sources.list.d/microsoft-edge-stable.list'
            sudo apt-get update

            #install Microsoft Edge stable
            sudo apt-get install -y microsoft-edge-stable
            microsoft-edge --version
            which microsoft-edge

            #fetch the major version of the installed Edge browser
            EDGE_VERSION=$(microsoft-edge --version | sed 's/Microsoft Edge //' | cut -d '.' -f 1)
            echo "Detected Microsoft Edge major version: $EDGE_VERSION"
            
            #fetch the corresponding WebDriver version
            DRIVER_URL="https://msedgedriver.azureedge.net/LATEST_RELEASE_$EDGE_VERSION"
            MSEDGEDRIVER_VERSION=$(curl -s $DRIVER_URL | tr -d '\r\n' | sed 's/[^0-9.]*//g')

            #debug output for sanity checks
            echo "Fetched msedgedriver version: $MSEDGEDRIVER_VERSION"
            
            if [ "$MSEDGEDRIVER_VERSION" == "NOT_FOUND" ]; then
              echo "Failed to locate Edge WebDriver for version $EDGE_VERSION."
              exit 1
            fi

            echo "Installing msedgedriver version $MSEDGEDRIVER_VERSION"
            wget "https://msedgedriver.azureedge.net/$MSEDGEDRIVER_VERSION/msedgedriver-linux64.zip"
            unzip msedgedriver-linux64.zip
            sudo mv msedgedriver /usr/local/bin/
            sudo chmod +x /usr/local/bin/msedgedriver
          fi

      - name: Restore dependencies
        run: dotnet restore

      - name: Build 
        run: dotnet build --no-restore 
        working-directory: .

      - name: Run API Tests
        run: dotnet test --filter "Category=API" --logger "trx;LogFileName=api-tests.trx"
        continue-on-error: true

      - name: Run UI Tests
        run: dotnet test --filter "Category!=API" --logger "trx;LogFileName=ui-tests.trx"
